{"version":3,"sources":["Waterloo.png","resume.png","api/weatherApi.js","RootContext.js","App.js","actions/SampleAction.js","actions/types.js","serviceWorker.js","reducers/SampleReducer.js","index.js","store/configureStore.js"],"names":["module","exports","getWeather","a","axios","get","res","data","weather","description","Error","message","getIcon","iconCode","icon","iconUrl","RootContext","React","createContext","RootProvider","Provider","App","Consumer","reset","setState","counter","props","sampleAction","state","getJoke","that","joke","quote","onBtnClicked","weatherApi","then","setUser","user2","user","this","counterVal","sampleState","className","value","name","loggedIn","href","src","alt","id","Waterloo","onClick","resume","Component","connect","sampleReducer","dispatch","type","catch","err","console","log","Boolean","window","location","hostname","match","action","store","redux","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.702af797.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Waterloo.70850ccb.png\";","module.exports = __webpack_public_path__ + \"static/media/resume.4bb611e0.png\";","import axios from 'axios';\r\n\r\nexport default {\r\n    getWeather: async () => {\r\n        try {\r\n            const res = await axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=1e82c8014294144a600b8de3cc75c5ed');\r\n            return res.data.weather[0].description;\r\n        }\r\n        catch (err) {\r\n            throw new Error(err.message);\r\n        }\r\n      },\r\n    getIcon: async () => {\r\n        try {\r\n            const res = await axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=1e82c8014294144a600b8de3cc75c5ed');\r\n            const iconCode = res.data.weather[0].icon;\r\n            const iconUrl = \"http://openweathermap.org/img/w/\" + iconCode + \".png\";\r\n            return iconUrl;\r\n        }\r\n        catch (err) {\r\n            throw new Error(err.message);\r\n        }\r\n      },\r\n}\r\n\r\n\r\n// getWeather = async () => {\r\n//     const that = this;\r\n//     try {\r\n//       const res = await axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=1e82c8014294144a600b8de3cc75c5ed');\r\n//       const weatherStr = `${res.data.weather[0].main} - ${res.data.weather[0].description}`;\r\n//       const iconCode = res.data.weather[0].icon;\r\n//       const iconUrl = \"http://openweathermap.org/img/w/\" + iconCode + \".png\";\r\n//       that.setState({weather: weatherStr, icon: iconUrl});\r\n//     } catch(error) {\r\n//       // handle error\r\n//       console.log(error);\r\n//     }\r\n//   }","import React from 'react';\r\n\r\nconst RootContext = React.createContext();\r\n\r\nexport const RootProvider = RootContext.Provider;\r\nexport const RootConsumer = RootContext.Consumer;\r\n\r\nexport default RootContext;","import React from 'react';\r\nimport Waterloo from './Waterloo.png';\r\nimport './App.css';\r\nimport resume from './resume.png';\r\nimport axios from 'axios';\r\nimport weatherApi from './api/weatherApi';\r\n\r\nimport { sampleAction } from './actions/SampleAction';\r\nimport { connect } from 'react-redux';\r\nimport { RootProvider } from './RootContext';\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      counter: 0,\r\n      icon: null,\r\n      quote: null,\r\n      user: null,\r\n    }\r\n  }\r\n  componentWillMount(){\r\n    this.getJoke();\r\n    this.onBtnClicked();\r\n  }\r\n\r\n  reset = () =>{\r\n    this.setState({counter: 0});\r\n    this.props.sampleAction(this.state.counter);\r\n  }\r\n\r\n\r\n  getJoke = async () => {\r\n    const that = this;\r\n    try {\r\n      const res = await axios.get('https://api.whatdoestrumpthink.com/api/v1/quotes/random');\r\n      const joke = res.data.message;\r\n      that.setState({quote: joke});\r\n    } catch(error) {\r\n    }\r\n  }\r\n\r\n  onBtnClicked = () => {\r\n    weatherApi.getIcon().then((res) => {\r\n       this.setState({icon : res});\r\n     });\r\n    this.props.sampleAction(); \r\n  }\r\n\r\n  setUser = (user2) => {\r\n    const user = user2;\r\n  }\r\n\r\n  render() {\r\n    const { counter, icon, quote } = this.state;\r\n    const { sampleState } = this.props.counterVal;\r\n    const user = { name: 'ada' , loggedIn: true };\r\n    return (\r\n      <RootProvider className=\"App\" value = {user}>\r\n        <div className=\"navi\" >\r\n\r\n          <h2 className=\"b\">|||</h2>\r\n          <a href='#about'> <h2 className=\"about\">A</h2> </a>\r\n          <a href='#exp'> <h2 className=\"exp\">E</h2> </a>\r\n          <a href='#res'> <h2 className=\"res\">R</h2> </a>\r\n          <a href='#con'> <h2 className=\"con\">C</h2> </a>\r\n          <img src={icon} className=\"Weather\" alt='Icon depicting current weather.' />\r\n\r\n        </div>\r\n        <header className=\"App-header\">\r\n          <h1 className=\"name\">Jackson He</h1>\r\n          <section id=\"about\">About</section>\r\n          <div className=\"page\">\r\n\r\n            <img src={Waterloo} className=\"logo\" alt=\"logo\" />\r\n            <h2 className=\"intro\">I'm currently a first-year student study in the Faculty of Mathematics in the University of Waterloo.</h2>\r\n          \r\n          </div>\r\n\r\n          <div className='joke' onClick={() => this.getJoke()}><strong>Joke of the day    ⭯</strong> <br/>\"{quote}\"</div>\r\n\r\n          <section id=\"exp\">Experience</section>\r\n          <h2 className=\"intro\">No work experience yet.</h2>\r\n\r\n          <section id=\"res\">Resume</section>\r\n          <img src={resume} className=\"resume\" alt=\"re\" />\r\n\r\n          <div className=\"cpr\">\r\n            <section className=\"contact\" id=\"con\">Contact</section>\r\n            Content & Design © 2020. Jackson He. All Rights Reserved\r\n          </div>\r\n\r\n        </header>\r\n      </RootProvider>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ sampleReducer }) => ({\r\n  counterVal: sampleReducer\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {sampleAction})(App);\r\n","import { SAMPLE_ACTION_TYPE } from './types'\r\nimport weatherApi from '../api/weatherApi';\r\n//The Action\r\nexport const weatherUpdate = (payload) => {\r\n    return {\r\n        type: SAMPLE_ACTION_TYPE,\r\n        sampleState: payload\r\n    }\r\n}\r\n\r\n//The Action Creator\r\nexport const sampleAction = () => (dispatch) => {\r\n\r\n    weatherApi\r\n      .getWeather()\r\n      .then((res) => {\r\n        dispatch(weatherUpdate(res));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    console.log('Action Creater Called');\r\n};\r\n","export const SAMPLE_ACTION_TYPE = 'sample_action_type';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SAMPLE_ACTION_TYPE } from '../actions/types'\r\n\r\nexport const sampleReducer = (state=2, action) => {\r\n    switch (action.type) {\r\n        case SAMPLE_ACTION_TYPE:\r\n            console.log('Reducer Got the Action');\r\n            return {\r\n                sampleState: action.sampleState\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as configureStore from './store/configureStore.js';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nconst store = configureStore.configure();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();","import * as redux from 'redux';\r\nimport {sampleReducer} from '../reducers/SampleReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const configure = () => {\r\n    const reducer = () => redux.combineReducers({\r\n        sampleReducer: sampleReducer,\r\n    });\r\n\r\n    const store = redux.createStore(reducer(), redux.applyMiddleware(thunk));\r\n    return store;\r\n}"],"sourceRoot":""}